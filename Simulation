<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Continuous Time Random Walk Simulation</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        label, input {
            margin: 8px 0;
            font-size: 16px;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 5px;
        }
        button:hover {
            background-color: #45a049;
        }
        canvas {
            margin-top: 20px;
        }
        .container {
            max-width: 900px;
            margin: 0 auto;
        }
    </style>
</head>
<body>

<div class="container">
    <h1>Simulate a Continuous Time Random Walk</h1>

    <label for="numSimulations">Number of Walks:</label>
    <input type="number" id="numSimulations" value="5" min="1" step="1">
    
    <label for="timeIntervals">Intervals Per Walk:</label>
    <input type="number" id="timeIntervals" value="100" min="1" step="1">
    
    <label for="probStep">Step Probability (between 0 and 1):</label>
    <input type="number" id="probStep" value="0.5" min="0" max="1" step="0.01">
    
    <button onclick="runWalkSimulations()">Start Simulation</button>

    <canvas id="walkChart" width="900" height="450"></canvas>
</div>

<script>
    let chartInstance; // To hold the Chart.js instance and avoid overlapping

    function runWalkSimulations() {
        const numWalks = parseInt(document.getElementById('numSimulations').value);
        const timeIntervals = parseInt(document.getElementById('timeIntervals').value);
        const probStep = parseFloat(document.getElementById('probStep').value);

        // Validate input
        if (
            isNaN(numWalks) || numWalks <= 0 || 
            isNaN(timeIntervals) || timeIntervals <= 0 || 
            isNaN(probStep) || probStep < 0 || probStep > 1
        ) {
            alert("Invalid input. Ensure values are within correct ranges.");
            return;
        }

        const timeStep = 1 / timeIntervals; // Time step for simulation
        const timeArray = Array.from({ length: timeIntervals + 1 }, (_, i) => i * timeStep); // Generate time points
        const walkData = [];

        // Perform multiple simulations
        for (let walk = 0; walk < numWalks; walk++) {
            let position = 0;
            const path = [position];

            for (let step = 0; step < timeIntervals; step++) {
                const move = Math.random() < probStep ? Math.sqrt(timeStep) : -Math.sqrt(timeStep);
                position += move;
                path.push(position);
            }

            walkData.push({
                label: `Walk ${walk + 1}`,
                data: path,
                borderColor: `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 1)`,
                fill: false,
            });
        }

        // Clear existing chart instance if any
        if (chartInstance) {
            chartInstance.destroy();
        }

        // Create new chart instance
        const ctx = document.getElementById('walkChart').getContext('2d');
        chartInstance = new Chart(ctx, {
            type: 'line',
            data: {
                labels: timeArray,
                datasets: walkData,
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Continuous Time Random Walk Simulation'
                    },
                    legend: {
                        display: true // Show legend for individual walks
                    }
                },
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Position'
                        }
                    }
                }
            }
        });
    }
</script>

</body>
</html>
